
// required for setting up database

DROP TABLE IF EXISTS STUDENTS;
DROP TABLE IF EXISTS TEACHERS;
DROP TABLE IF EXISTS COURSES;
DROP TABLE IF EXISTS GRADES;
CREATE TABLE STUDENTS(ID INTEGER PRIMARY KEY AUTOINCREMENT ,
                      FIRST_NAME VARCHAR,
                      LAST_NAME VARCHAR,
                      EMAIL VARCHAR,
                      PHONE INTEGER,
                      CITY VARCHAR);
CREATE TABLE TEACHERS(ID INTEGER PRIMARY KEY ,
                      FIRST_NAME VARCHAR,
                      LAST_NAME VARCHAR);
CREATE TABLE COURSES(ID INTEGER PRIMARY KEY,
                     TEACHER_ID VARCHAR,
                     NAME VARCHAR,
                     TIME_OF_YEAR VARCHAR);

CREATE TABLE GRADES(ID INTEGER PRIMARY KEY AUTOINCREMENT,
                    STUDENT_ID INTEGER,
                    COURSE_ID INTEGER,
                    TEACHER_ID INTEGER,
                    GRADE INT,
                    FOREIGN KEY (STUDENT_ID) REFERENCES STUDENTS(ID),
                    FOREIGN KEY (TEACHER_ID) REFERENCES TEACHERS(ID),
                    FOREIGN KEY (COURSE_ID) REFERENCES COURSES(ID));
INSERT INTO COURSES VALUES (42, 59, 'SD', 'E2019'), (123, 59, 'SD', 'F2020'), (551, 340, 'ES1', 'E2019');
INSERT  INTO TEACHERS VALUES (59, 'Line', 'Reinhardt'),(340, 'Ebbe', 'Vang');


//test statements were used to find the correct ResultSets for GUI

SELECT * FROM STUDENTS;
SELECT * FROM COURSES;
SELECT * FROM TEACHERS;
SELECT * FROM GRADES;
SELECT S.FIRST_NAME ||' '|| S.LAST_NAME AS NAME, COURSE_ID FROM GRADES LEFT JOIN STUDENTS S ON GRADES.STUDENT_ID = S.ID WHERE GRADE IS NULL;

SELECT GRADE FROM GRADES WHERE STUDENT_ID = 1 AND COURSE_ID = 551 AND GRADE IS NULL;
SELECT * FROM STUDENTS WHERE STUDENTS.FIRST_NAME ||' '|| STUDENTS.LAST_NAME ='Aisha Lincoln';

SELECT GRADES.*
WHERE COURSE_ID = ID;
SELECT GRADES.* FROM GRADES LEFT JOIN COURSES C ON COURSE_ID = C.ID LEFT JOIN STUDENTS S on GRADES.STUDENT_ID = S.ID
WHERE S.FIRST_NAME ||' '|| S.LAST_NAME = 'Aisha Lincoln' AND C.NAME ||' '|| C.TIME_OF_YEAR = 'ES1 E2019' AND GRADE IS NULL;

SELECT GRADE FROM GRADES WHERE EXISTS(SELECT GRADES.* FROM GRADES LEFT JOIN COURSES C ON COURSE_ID = C.ID LEFT JOIN STUDENTS S on GRADES.STUDENT_ID = S.ID
WHERE S.FIRST_NAME ||' '|| S.LAST_NAME = 'Aisha Lincoln' AND C.NAME ||' '|| C.TIME_OF_YEAR = 'ES1 E2019' AND GRADE IS NULL), GRADE);


SELECT STUDENTS.FIRST_NAME ||' '|| STUDENTS.LAST_NAME AS [Student], COURSES.NAME ||' '|| COURSES.TIME_OF_YEAR AS [Course], TEACHERS.FIRST_NAME ||' '|| TEACHERS.LAST_NAME AS [Teacher], GRADE
FROM GRADES
LEFT JOIN STUDENTS on GRADES.STUDENT_ID = STUDENTS.ID
LEFT JOIN COURSES on GRADES.COURSE_ID = COURSES.ID
LEFT JOIN TEACHERS on COURSES.TEACHER_ID = TEACHERS.ID
WHERE STUDENTS.FIRST_NAME ||' '|| STUDENTS.LAST_NAME = 'Aisha Lincoln';


SELECT STUDENTS.FIRST_NAME ||' '|| STUDENTS.LAST_NAME AS [Student], AVG(DISTINCT GRADE)AS Average FROM GRADES LEFT JOIN STUDENTS on GRADES.STUDENT_ID = STUDENTS.ID WHERE STUDENTS.FIRST_NAME ||' '|| STUDENTS.LAST_NAME = 'Aisha Lincoln' GROUP BY STUDENT_ID;

SELECT COURSES.NAME ||' '|| COURSES.TIME_OF_YEAR AS [Course], TEACHERS.FIRST_NAME ||' '|| TEACHERS.LAST_NAME AS [Teacher], AVG(DISTINCT GRADE) AS Average FROM GRADES LEFT JOIN COURSES on GRADES.COURSE_ID = COURSES.ID LEFT JOIN TEACHERS on COURSES.TEACHER_ID = TEACHERS.ID WHERE COURSES.NAME ||' '|| COURSES.TIME_OF_YEAR= 'ES1 E2019';